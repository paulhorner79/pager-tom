{
  "name": "Pager Tom",
  "tagline": "This is another Javascript pagination library",
  "body": "# Pager Tom\r\n\r\nThis is a Javascript pagination library.  There is no reason for the name\r\nexcept that it's a pun.\r\n\r\n> This is Ground Control to Pager Tom...\r\n\r\n** Please note that this is work in progress and not production ready **\r\n\r\n## Quickstart\r\n\r\nTo use this library, put a link to it at the bottom of your page, after your\r\nJQuery library is loaded.  You can put it in the header if you want, but you\r\nprobably shouldn't because that was what we did in the 90s.\r\n\r\nThen place an element on the page where you want the pagination buttons to\r\nappear.\r\n\r\n```\r\n<div id=\"paginate\"></div>\r\n```\r\n\r\nThen add a script and invoke the paginate method on the specified element,\r\nincluding the bespoke options required.  \r\n\r\nYou can call API methods on the pagination object.\r\n\r\n```\r\n<script>\r\nvar pagination = $('#paginate').PagerTom({\r\n        'target': '#pagination',\r\n        'itemtarget': 'div.item',\r\n        'perpage': 10,\r\n        'hash': 'page-'\r\n    });\r\n\r\npagination.openPage(5);\r\n\r\n</script>\r\n```\r\n\r\nThe `target` and `itemtarget` options are really important because they are the\r\nthings it's looking at paginating.  In this example you would have something on\r\nthe page that looks a bit like this.  Not exactly like this though, that would\r\nbe a bit pointless.\r\n\r\n```\r\n<div id=\"pagination\">\r\n    <div class=\"item\">Item 1</div>\r\n    <div class=\"item\">Item 2</div>\r\n    <div class=\"item\">Item 3</div>\r\n    <div class=\"item\">Item 4</div>\r\n    <div class=\"item\">Item 5</div>\r\n    <div class=\"item\">Item 6</div>\r\n    <div class=\"item\">Item 7</div>\r\n    <div class=\"item\">Item 8</div>\r\n    <div class=\"item\">Item 9</div>\r\n    <div class=\"item\">Item 10</div>\r\n    <div class=\"item\">Item 11</div>\r\n</div>\r\n```\r\n\r\n## Prerequisites\r\n\r\nJQuery is used to handle the DOM manipulation.  Basically because it supports\r\nmost browsers.\r\n\r\n## LESS/CSS\r\n\r\nThis uses a very Bootstrap-like design for the pagination elements.  However,\r\nyou can easily overwrite these using the included CSS/LESS.\r\n\r\n#### `.paginate`\r\n\r\nThis is the class used for the pagination buttons.  It is a HTML `ul`\r\n\r\n#### `.paginate li`\r\n\r\nThis is the class for a single pagination button.\r\n\r\n#### `.paginate li.active`\r\n\r\nThis is the current page.\r\n\r\n#### `.paginate li.disabled`\r\n\r\nThis is a button that can't be clicked.\r\n\r\n## Options\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Name</th>\r\n            <th>Type</th>\r\n            <th>Default</th>\r\n            <th>Description</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>perpage</td>\r\n            <td>integer</td>\r\n            <td>10</td>\r\n            <td>The number of items that should appear on a page</td>\r\n        </tr>\r\n        <tr>\r\n            <td>page</td>\r\n            <td>integer</td>\r\n            <td>1</td>\r\n            <td>The page to load</td>\r\n        </tr>\r\n        <tr>\r\n            <td>target</td>\r\n            <td>string</td>\r\n            <td>'#pages'</td>\r\n            <td>\r\n                The overall target element that you want to paginate.  It will\r\n                show `perpage` child `itemtarget` elements per page.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>itemtarget</td>\r\n            <td>string</td>\r\n            <td>div</td>\r\n            <td>The selector for items within a page.</td>\r\n        </tr>\r\n        <tr>\r\n            <td>previous</td>\r\n            <td>boolean|string</td>\r\n            <td>\"Previous\"</td>\r\n            <td>\r\n                What do you want the text on the previous button to be.  If\r\n                this is `false`, no previous button will be shown.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>next</td>\r\n            <td>boolean|string</td>\r\n            <td>\"Next\"</td>\r\n            <td>\r\n                What do you want the text on the next button to be.  If\r\n                this is `false`, no next button will be shown.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>first</td>\r\n            <td>boolean|string</td>\r\n            <td>\"First\"</td>\r\n            <td>\r\n                What do you want the text on the first button to be.  If this\r\n                is `false`, no first button will be shown.  If it is `true` it\r\n                will show \"1\" as the first page.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>last</td>\r\n            <td>boolean|string</td>\r\n            <td>\"Last\"</td>\r\n            <td>\r\n                What do you want the text on the last button to be.  If this is\r\n                `false`, no last button will be shown. If it is `true` it\r\n                will show the number of the last page.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>otherpages</td>\r\n            <td>boolean|integer</td>\r\n            <td>false</td>\r\n            <td>\r\n                If an integer is passed to this value, it will only show that\r\n                number of pages either side of the current page.  So if this is\r\n                `1` and you are on page `5`, only pages `4`, `5`, and `6` will\r\n                be shown.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>pagecount</td>\r\n            <td>string|boolean</td>\r\n            <td>Page [page] of [pagecount].</td>\r\n            <td>\r\n                This allows you to specify whether the pagecount text is\r\n                displayed.  A `false` value will hide this.\r\n                <br><br>\r\n                The available options are:\r\n                <ul>\r\n                <li>[page] - the number of the current page being viewed.</li>\r\n                <li> [pagecount] - the total number of pages available.</li>\r\n                </ul>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>hash</td>\r\n            <td>boolean|string</td>\r\n            <td>false</td>\r\n            <td>\r\n                Do you want the hash of the window to change. If this is a\r\n                string, the window hash will change when clicking on a page.  \r\n                This is useful if you want to allow a page to pick up the\r\n                current page when refreshed.  The value will contain the\r\n                page number as a suffix, so if it is set as \"page\", the URL\r\n                will change to \"#page5\" if the fifth page is selected.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>animate</td>\r\n            <td>boolean</td>\r\n            <td>true</td>\r\n            <td>Do you want to fade in the next page?</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n## API\r\n\r\n### `.openPage(page);`\r\n\r\nCloses the current page and opens the page specified.  If the current page is\r\nthe specified page, this will not fire.  If the specified page does not exist,\r\nthe closest possible page will be opened (ie it will open the first or last\r\npage).\r\n\r\n### `.nextPage();`\r\n\r\nCloses the current page and opens the next page.  If the current page is the\r\nlast page, this will not fire.\r\n\r\n### `.previousPage();`\r\n\r\nCloses the current page and opens the previous page.  If the current page is\r\nthe first page, this will not fire.\r\n\r\n### `.firstPage();`\r\n\r\nCloses the current page and opens the first page.  If the current page is the\r\nfirst page, this will not fire.\r\n\r\n### `.lastPage();`\r\n\r\nCloses the current page and opens the last page.  If the current page is the\r\nlast page, this will not fire.\r\n\r\n### `.pageCount();`\r\n\r\nReturns the number of pages.\r\n\r\n### `.pageCountText();`\r\n\r\nReturns the text showing the number of pages, based on the `pagecount` option.\r\n\r\n### `.showButtons();`\r\n\r\nWill redraw the buttons on the page.\r\n\r\n### `.resetButtons();`\r\n\r\nWill hide the buttons on the page.\r\n\r\n### `.hashValue();`\r\n\r\nReturns the page number that the window hash value is suggesting we are looking\r\nat.  This will return 0 if it doesn't recognise the number.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}